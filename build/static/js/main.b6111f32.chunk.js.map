{"version":3,"sources":["services/IssueService.js","components/ListIssueComponent.jsx","components/HeaderComponent.js","components/FooterComponent.js","components/CreateIssueComponent.jsx","components/UpdateIssueComponent.jsx","components/ViewIssueComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["ISSUE_API_BASE_URL","axios","get","issue","post","issueId","put","delete","ListIssueComponent","props","state","issues","addIssue","bind","editIssue","deleteIssue","id","IssueService","then","res","setState","filter","this","history","push","getIssues","data","className","onClick","map","key","name","priority","status","description","style","marginLeft","viewIssue","Component","HeaderComponent","href","FooterComponent","CreateIssueComponent","saveOrUpdateIssue","e","preventDefault","console","log","JSON","stringify","createIssue","updateIssue","changeNameHandler","event","target","value","changePriorityHandler","changeStatusHandler","changeDescriptionHandler","match","params","getIssueById","getTitle","autoComplete","onChange","selected","disabled","hidden","cancel","UpdateIssueComponent","ViewIssueComponent","handleBack","goback","goBack","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b6111f32.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst ISSUE_API_BASE_URL = \"https://heroku-springbootbackend.herokuapp.com/api/v1/issues\";\n\nclass IssueService {\n\n    getIssues(){\n        return axios.get(ISSUE_API_BASE_URL);\n    }\n\n    createIssue(issue){\n        return axios.post(ISSUE_API_BASE_URL, issue);\n    }\n\n    getIssueById(issueId){\n        return axios.get(ISSUE_API_BASE_URL + '/' + issueId);\n    }\n\n    updateIssue(issue, issueId){\n        return axios.put(ISSUE_API_BASE_URL + '/' + issueId, issue);\n    }\n\n    deleteIssue(issueId){\n        return axios.delete(ISSUE_API_BASE_URL + '/' + issueId);\n    }\n}\n\nexport default new IssueService()","import React, { Component } from 'react'\nimport IssueService from '../services/IssueService'\n\nclass ListIssueComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n                issues: []\n        }\n        this.addIssue = this.addIssue.bind(this);\n        this.editIssue = this.editIssue.bind(this);\n        this.deleteIssue = this.deleteIssue.bind(this);\n    }\n\n    deleteIssue(id){\n        IssueService.deleteIssue(id).then( res => {\n            this.setState({issues: this.state.issues.filter(issue => issue.id !== id)});\n        });\n    }\n    viewIssue(id){\n        this.props.history.push(`/view-issue/${id}`);\n    }\n    editIssue(id){\n        this.props.history.push(`/add-issue/${id}`);\n    }\n\n    componentDidMount(){\n        IssueService.getIssues().then((res) => {\n            this.setState({ issues: res.data});\n        });\n    }\n\n    addIssue(){\n        this.props.history.push('/add-issue/_add');\n    }\n\n    render() {\n        return (\n            <div>\n                 <h2 className=\"text-center\">Bug List</h2>\n                 <div className = \"row\">\n                    <button className=\"btn btn-primary\" onClick={this.addIssue}> Add Issue</button>\n                 </div>\n                 <br></br>\n                 <div className = \"row\">\n                        <table className = \"table table-striped table-bordered\">\n\n                            <thead>\n                                <tr>\n                                    <th> Name</th>\n                                    <th> Priority</th>\n                                    <th> Status</th>\n                                    <th> Description</th>\n                                    <th> Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    this.state.issues.map(\n                                        issue => \n                                        <tr key = {issue.id}>\n                                             <td> {issue.name} </td>   \n                                             <td> {issue.priority}</td>\n                                             <td> {issue.status}</td>\n                                             <td> {issue.description}</td>\n                                             <td>\n                                                 <button onClick={ () => this.editIssue(issue.id)} className=\"btn btn-info\">Update </button>\n                                                 <button style={{marginLeft: \"10px\"}} onClick={ () => this.deleteIssue(issue.id)} className=\"btn btn-danger\">Delete </button>\n                                                 <button style={{marginLeft: \"10px\"}} onClick={ () => this.viewIssue(issue.id)} className=\"btn btn-info\">View </button>\n                                             </td>\n                                        </tr>\n                                    )\n                                }\n                            </tbody>\n                        </table>\n\n                 </div>\n\n            </div>\n        )\n    }\n}\n\nexport default ListIssueComponent","import React, { Component } from \"react\";\n\nclass HeaderComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        <header>\n          <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n            <div>\n              <a\n                href=\"https://github.com/ConnorAlbert\"\n                className=\"navbar-brand\"\n              >\n                Bug Tracker App\n              </a>\n            </div>\n          </nav>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default HeaderComponent;\n","import React, { Component } from 'react'\n\nclass FooterComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n                 \n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <footer className = \"footer\">\n                </footer>\n            </div>\n        )\n    }\n}\n\nexport default FooterComponent","import React, { Component } from \"react\";\nimport IssueService from \"../services/IssueService\";\n\nclass CreateIssueComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // step 2\n      id: this.props.match.params.id,\n      name: \"\",\n      priority: \"\",\n      status: \"\",\n      description: \"\",\n    };\n    this.changeNameHandler = this.changeNameHandler.bind(this);\n    this.changePriorityHandler = this.changePriorityHandler.bind(this);\n    this.changeStatusHandler = this.changeStatusHandler.bind(this);\n    this.changeDescriptionHandler = this.changeDescriptionHandler.bind(this);\n    this.saveOrUpdateIssue = this.saveOrUpdateIssue.bind(this);\n  }\n\n  // step 3\n  componentDidMount() {\n    // step 4\n    if (this.state.id === \"_add\") {\n      return;\n    } else {\n      IssueService.getIssueById(this.state.id).then((res) => {\n        let issue = res.data;\n        this.setState({\n          name: issue.name,\n          priority: issue.priority,\n          status: issue.status,\n          description: issue.description,\n        });\n      });\n    }\n  }\n  saveOrUpdateIssue = (e) => {\n    e.preventDefault();\n    let issue = {\n      name: this.state.name,\n      priority: this.state.priority,\n      status: this.state.status,\n      description: this.state.description,\n    };\n    console.log(\"issue => \" + JSON.stringify(issue));\n\n    // step 5\n    if (this.state.id === \"_add\") {\n      IssueService.createIssue(issue).then((res) => {\n        this.props.history.push(\"/issues\");\n      });\n    } else {\n      IssueService.updateIssue(issue, this.state.id).then((res) => {\n        this.props.history.push(\"/issues\");\n      });\n    }\n  };\n\n  changeNameHandler = (event) => {\n    this.setState({ name: event.target.value });\n  };\n\n  changePriorityHandler = (event) => {\n    this.setState({ priority: event.target.value });\n  };\n\n  changeStatusHandler = (event) => {\n    this.setState({ status: event.target.value });\n  };\n\n  changeDescriptionHandler = (event) => {\n    this.setState({ description: event.target.value });\n  };\n\n  cancel() {\n    this.props.history.push(\"/issues\");\n  }\n\n  getTitle() {\n    if (this.state.id === \"_add\") {\n      return <h3 className=\"text-center\">Add Issue</h3>;\n    } else {\n      return <h3 className=\"text-center\">Update Issue</h3>;\n    }\n  }\n  render() {\n    return (\n      <div>\n        <br></br>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"card col-md-6 offset-md-3 offset-md-3\">\n              {this.getTitle()}\n              <div className=\"card-body\">\n                <form>\n                  <div className=\"form-group\">\n                    <label> Name: </label>\n                    <input\n                      autoComplete=\"off\"\n                      name=\"name\"\n                      className=\"form-control\"\n                      value={this.state.name}\n                      onChange={this.changeNameHandler}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <div>\n                      <label>\n                        Priority:\n                        <select\n                          name=\"priority\"\n                          className=\"form-option\"\n                          value={this.state.priority}\n                          onChange={this.changePriorityHandler}\n                        >\n                          <option value=\"\" selected disabled hidden>Choose here</option>\n                          <option value=\"Low\">Low</option>\n                          <option value=\"Medium\">Medium</option>\n                          <option value=\"High\">High</option>\n                          <option value=\"Critical\">Critical</option>\n                        </select>\n                      </label>\n                    </div>\n                    <div className=\"form-group\">\n                      <div>\n                        <label>\n                          Status:\n                          <select\n                            name=\"Status\"\n                            className=\"form-option\"\n                            value={this.state.status}\n                            onChange={this.changeStatusHandler}\n                          >\n                            <option value=\"\" selected disabled hidden>Choose here</option>\n                            <option value=\"Open\">Open</option>\n                            <option value=\"Closed\">Closed</option>\n                            <option value=\"Fixed\">Fixed</option>\n                          </select>\n                        </label>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"form-group\">\n                    <label> Description: </label>\n                    <input\n                      autoComplete=\"off\"\n                      name=\"description\"\n                      className=\"form-control\"\n                      value={this.state.description}\n                      onChange={this.changeDescriptionHandler}\n                    />\n                  </div>\n\n                  <button\n                    className=\"btn btn-success\"\n                    onClick={this.saveOrUpdateIssue}\n                  >\n                    Save\n                  </button>\n                  <button\n                    className=\"btn btn-danger\"\n                    onClick={this.cancel.bind(this)}\n                    style={{ marginLeft: \"10px\" }}\n                  >\n                    Cancel\n                  </button>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CreateIssueComponent;\n","import React, { Component } from \"react\";\nimport IssueService from \"../services/IssueService\";\n\nclass UpdateIssueComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: this.props.match.params.id,\n      name: \"\",\n      priority: \"\",\n      status: \"\",\n      description: \"\",\n    };\n    this.changeNameHandler = this.changeNameHandler.bind(this);\n    this.changePriorityHandler = this.changePriorityHandler.bind(this);\n    this.changeStatusHandler = this.changeStatusHandler.bind(this);\n    this.changeDescriptionHandler = this.changeDescriptionHandler.bind(this);\n    this.updateIssue = this.updateIssue.bind(this);\n  }\n\n  componentDidMount() {\n    IssueService.getIssueById(this.state.id).then((res) => {\n      let issue = res.data;\n      this.setState({\n        name: issue.name,\n        priority: issue.priority,\n        status: issue.status,\n        description: issue.description\n      });\n    });\n  }\n\n  updateIssue = (e) => {\n    e.preventDefault();\n    let issue = {\n      name: this.state.name,\n      priority: this.state.priority,\n      status: this.state.status,\n      description: this.state.description\n    };\n    console.log(\"issue => \" + JSON.stringify(issue));\n    console.log(\"id => \" + JSON.stringify(this.state.id));\n    IssueService.updateIssue(issue, this.state.id).then((res) => {\n      this.props.history.push(\"/issues\");\n    });\n  };\n\n  changeNameHandler = (event) => {\n    this.setState({ name: event.target.value });\n  };\n\n  changePriorityHandler = (event) => {\n    this.setState({ priority: event.target.value });\n  };\n\n  changeStatusHandler = (event) => {\n    this.setState({ status: event.target.value });\n  };\n\n  changeDescriptionHandler = (event) => {\n    this.setState({ description: event.target.value });\n  };\n\n  cancel() {\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    return (\n      <div>\n        <br></br>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"card col-md-6 offset-md-3 offset-md-3\">\n              <h3 className=\"text-center\">Update Issue</h3>\n              <div className=\"card-body\">\n                <form>\n                <div className=\"form-group\">\n                    <label> Name: </label>\n                    <input\n                      name=\"name\"\n                      className=\"form-control\"\n                      value={this.state.name}\n                      onChange={this.changeNameHandler}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label> Priority: </label>\n                    <input\n                      name=\"priority\"\n                      className=\"form-control\"\n                      value={this.state.priority}\n                      onChange={this.changePriorityHandler}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label> Status: </label>\n                    <input\n                      name=\"status\"\n                      className=\"form-control\"\n                      value={this.state.status}\n                      onChange={this.changeStatusHandler}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label> Description: </label>\n                    <input\n                      name=\"description\"\n                      className=\"form-control\"\n                      value={this.state.description}\n                      onChange={this.changeDescriptionHandler}\n                    />\n                  </div>\n                  \n\n                  <button\n                    className=\"btn btn-success\"\n                    onClick={this.updateIssue}\n                  >\n                    Save\n                  </button>\n                  <button\n                    className=\"btn btn-danger\"\n                    onClick={this.cancel.bind(this)}\n                    style={{ marginLeft: \"10px\" }}\n                  >\n                    Cancel\n                  </button>\n                  </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UpdateIssueComponent;\n","import React, { Component } from 'react'\nimport IssueService from '../services/IssueService'\n\nclass ViewIssueComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.handleBack=this.handleBack.bind(this)\n\n        this.state = {\n            id: this.props.match.params.id,\n            issue: {}\n        }\n    }\n    handleBack() {\n        this.props.history.goback()\n    }\n\n    componentDidMount(){\n        IssueService.getIssueById(this.state.id).then( res => {\n            this.setState({issue: res.data});\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <br></br>\n                <div className = \"card col-md-6 offset-md-3\">\n                    <h3 className = \"text-center\"> View Issue Details</h3>\n                    <div className = \"card-body\">\n                        <div className = \"rows\">\n                            <label> Name: </label>\n                            <div className='data'> { this.state.issue.name }</div>\n                        </div>\n                        <div className = \"rows\">\n                            <label> Priority: </label>\n                            <div className='data'> { this.state.issue.priority }</div>\n                        </div>\n                        <div className = \"rows\">\n                            <label> Status: </label>\n                            <div className='data'> { this.state.issue.status }</div>\n                        </div>\n                        <div className = \"rows\">\n                            <label> Description: </label>\n                            <div className='data'> { this.state.issue.description }</div>\n                        </div>\n                        <div>\n                            <button className='btn-back' onClick={this.props.history.goBack}>Back</button>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ViewIssueComponent","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport ListIssueComponent from './components/ListIssueComponent';\nimport HeaderComponent from './components/HeaderComponent';\nimport FooterComponent from './components/FooterComponent';\nimport CreateIssueComponent from './components/CreateIssueComponent';\nimport UpdateIssueComponent from './components/UpdateIssueComponent';\nimport ViewIssueComponent from './components/ViewIssueComponent';\n\nfunction App() {\n  return (\n    <div>\n        <Router>\n              <HeaderComponent />\n                <div className=\"container\">\n                    <Switch> \n                          <Route path = \"/\" exact component = {ListIssueComponent}></Route>\n                          <Route path = \"/issues\" component = {ListIssueComponent}></Route>\n                          <Route path = \"/add-issue/:id\" component = {CreateIssueComponent}></Route>\n                          <Route path = \"/view-issue/:id\" component = {ViewIssueComponent}></Route>\n                          <Route path = \"/update-issue/:id\" component = {UpdateIssueComponent}></Route>\n                    </Switch>\n                </div>\n              <FooterComponent />\n        </Router>\n    </div>\n    \n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}